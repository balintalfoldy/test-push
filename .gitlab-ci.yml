image: python:3.8

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

cache:
  paths:
    - .cache/pip
    - venv/

before_script:
  - python -V
  - pip install --upgrade pip
  - pip install virtualenv
  - virtualenv venv
  - source venv/bin/activate
  - pip install -r requirements.txt

stages:
  - lint
  - test
  - build
  - deploy

# Define the job that runs pylint and enforces a minimum rating
lint:
  stage: lint
  script:
    - pip install pylint
    - pylint --fail-under=7.0 coffee
  allow_failure: false
  rules:
    # Only run the job for merge request events
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always

# Define the job that runs tests
test:
  stage: test
  script:
    - python -m pytest
  rules:
    # Only run the job for merge request events
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
    # Only run the job for the main branch
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: always
# Define the job that builds the Python package
build:
  stage: build
  script:
    - pip install --upgrade build
    - python -m build
  rules:
    # Only run the job for the main branch
    - if: '$CI_COMMIT_BRANCH == "main"'

# Define the job that pushes the code to a public repository such as GitHub
push:
  stage: deploy
  image: alpine:latest
  script:
    - apk update && apk add git
    - git config --global user.email "alfibalint@gmail.com"
    - git config --global user.name "Balint Alfoldy"
    - git remote set-url origin https://github.com/balintalfoldy/ddc-cicd.git
    - git checkout main
    - git push origin main
  rules:
    # Only run the job for the main branch
    - if: '$CI_COMMIT_BRANCH == "main"'
      # Exclude the before_script section for the push job
    - when: never
      changes:
        - README.md
        - "*.md"
        - "docs/**"
        - "tests/**"
        - "*.py"
        - "*.yml"
        - "*.yaml"
        - "*.json"
        - "*.ini"
        - "*.cfg"

